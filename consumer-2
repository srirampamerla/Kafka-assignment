import argparse

from confluent_kafka import Consumer
from confluent_kafka.serialization import SerializationContext, MessageField
from confluent_kafka.schema_registry.json_schema import JSONDeserializer
from confluent_kafka.schema_registry import SchemaRegistryClient


API_KEY = 'VOWLPGRMKXCAXIYP'
ENDPOINT_SCHEMA_URL  = 'https://psrc-8kz20.us-east-2.aws.confluent.cloud'
API_SECRET_KEY = 'l9G6Nn+aDsnwl/0UhVu8sI3akMsCHD3xHu/1pe/QahAmYQiwRjJu/V8ZlbKvt8i2'
BOOTSTRAP_SERVER = 'pkc-ymrq7.us-east-2.aws.confluent.cloud:9092'
SECURITY_PROTOCOL = 'SASL_SSL'
SSL_MACHENISM = 'PLAIN'
SCHEMA_REGISTRY_API_KEY = 'UVG33EOIXL6AOL72'
SCHEMA_REGISTRY_API_SECRET = '6mtAqyKPLgiAPCHg0AXdIMm61uSsNqiXXeyEINTHpVlw4+j+vyUA8i5i69eXezR7'


def sasl_conf():

    sasl_conf = {'sasl.mechanism': SSL_MACHENISM,
                 # Set to SASL_SSL to enable TLS support.
                #  'security.protocol': 'SASL_PLAINTEXT'}
                'bootstrap.servers':BOOTSTRAP_SERVER,
                'security.protocol': SECURITY_PROTOCOL,
                'sasl.username': API_KEY,
                'sasl.password': API_SECRET_KEY
                }
    return sasl_conf



def schema_config():
    return {'url':ENDPOINT_SCHEMA_URL,
    
    'basic.auth.user.info':f"{SCHEMA_REGISTRY_API_KEY}:{SCHEMA_REGISTRY_API_SECRET}"

    }


class Order:
    def __init__(self, order: dict):
        self.order = order

    @staticmethod
    def dict_to_order(data:dict,ctx):
        return Order(order=data)

    def __str__(self):
        return f'{self.order}'


def main(topic):
    # Create schema registry client
    schema_registry_client = SchemaRegistryClient(schema_config())

    # Get latest schema
    latest_schema = schema_registry_client.get_latest_version('restaurent-take-away-data-value').schema.schema_str
    # creating JSON deserializer
    json_deserializer = JSONDeserializer(latest_schema,from_dict=Order.dict_to_order)

    consumer_conf = sasl_conf()
    consumer_conf.update({
                     'group.id': 'group2',
                     'auto.offset.reset': "latest"})
                     #earliest from first latest means last read

    consumer = Consumer(consumer_conf)
    consumer.subscribe([topic])


    while True:
        try:
            msg = consumer.poll(1.0)
            if msg is None:
                continue

            order = json_deserializer(msg.value(), SerializationContext(msg.topic(), MessageField.VALUE))

            if order is not None:
                print("User record {}: order: {}\n".format(msg.key(), order))

        except KeyboardInterrupt:
            break

    consumer.close()

main("restaurent-take-away-data")
